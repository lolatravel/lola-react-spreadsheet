{"version":3,"file":"bundle.js","sources":["../src/hooks/useCombinedRefs.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/utils/domUtils.ts","../src/Columns.tsx","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useLatestFunc.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/utils/columnUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/HeaderRow.tsx","../src/Cell.tsx","../src/editors/EditorContainer.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import  { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  function cancelAnimationFrameRequest() {\n    if (typeof frameRequestRef.current === 'number') {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    function onOutsideClick() {\n      frameRequestRef.current = undefined;\n      onClickRef.current();\n    }\n\n    function onWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      frameRequestRef.current = requestAnimationFrame(onOutsideClick);\n    }\n\n    window.addEventListener('click', onWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', onWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return cancelAnimationFrameRequest;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\n// https://github.com/microsoft/TypeScript/issues/37861\ninterface ResizeObserverEntry {\n  contentRect: {\n    width: number;\n    height: number;\n  };\n}\n\ntype ResizeObserver = new (callback: (entries: readonly ResizeObserverEntry[]) => void) => {\n  observe: (target: Element) => void;\n  disconnect: () => void;\n};\n\nexport function useGridDimensions(): [React.RefObject<HTMLDivElement>, number, number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { ResizeObserver } = window as typeof window & { ResizeObserver: ResizeObserver };\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      setGridWidth(width);\n      setGridHeight(height);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import React from 'react';\nimport clsx from 'clsx';\n\nimport { useFocusRef } from '../hooks/useFocusRef';\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx('rdg-checkbox-label', { 'rdg-checkbox-label-disabled': disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className=\"rdg-checkbox-input\"\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className=\"rdg-checkbox\" />\n    </label>\n  );\n}\n","import React, { useMemo } from 'react';\nimport type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R>(props: FormatterProps<R>) {\n    const cellValue = props.cell;\n    const valueComponent = useMemo(() => {\n        try {\n            if (typeof cellValue === 'object') {\n                return <>{cellValue.value}</>;\n            }\n            return <>{cellValue}</>;\n        } catch {\n            return null;\n        }\n    }, [cellValue]);\n\n    return valueComponent;\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function wrapEvent<E extends React.SyntheticEvent>(ourHandler: React.EventHandler<E>, theirHandler: React.EventHandler<E> | undefined) {\n  if (theirHandler === undefined) return ourHandler;\n\n  return function(event: E) {\n    ourHandler(event);\n    theirHandler(event);\n  };\n}\n","import React from 'react';\nimport { SelectCellFormatter } from './formatters';\nimport type { Column } from './types';\nimport { stopPropagation } from './utils/domUtils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  }\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface ViewportColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n}\n\nexport function useViewportColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions\n}: ViewportColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 54;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, lastFrozenColumnIndex, totalColumnWidth, totalFrozenColumnWidth } = useMemo(() => {\n    let left = 0;\n    let totalWidth = 0;\n    let allocatedWidths = 0;\n    let unassignedColumnsCount = 0;\n    let lastFrozenColumnIndex = -1;\n    type IntermediateColumn = Column<R, SR> & { width: number | undefined; rowGroup?: boolean };\n    let totalFrozenColumnWidth = 0;\n\n    const columns = rawColumns.map(metricsColumn => {\n      let width = getSpecifiedWidth(metricsColumn, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, metricsColumn, minColumnWidth);\n        allocatedWidths += width;\n      }\n\n      const column: IntermediateColumn = { ...metricsColumn, width };\n\n      if (column.frozen && !column.frozenAlignment) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns third:\n      // if (frozenA) {\n      //   if (frozenB) return 0;\n      //   return -1;\n      // }\n      // if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const unallocatedWidth = viewportWidth - allocatedWidths;\n    const unallocatedColumnWidth = Math.max(\n      Math.floor(unallocatedWidth / unassignedColumnsCount),\n      minColumnWidth\n    );\n\n    const calculatedColumns: CalculatedColumn<R, SR>[] = columns.map((column, idx) => {\n      // Every column should have a valid width as this stage\n      const width = column.width ?? clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n      const newColumn = {\n        ...column,\n        idx,\n        width,\n        left,\n        sortable: column.sortable ?? defaultSortable,\n        resizable: column.resizable ?? defaultResizable,\n        formatter: column.formatter ?? defaultFormatter\n      };\n\n      totalWidth += width;\n      left = column.frozenAlignment === 'right' ? left : left + width;\n      return newColumn;\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      const lastFrozenColumn = calculatedColumns[lastFrozenColumnIndex];\n      lastFrozenColumn.isLastFrozenColumn = true;\n      totalFrozenColumnWidth = lastFrozenColumn.left + lastFrozenColumn.width;\n    }\n\n    return {\n      columns: calculatedColumns,\n      lastFrozenColumnIndex,\n      totalFrozenColumnWidth,\n      totalColumnWidth: totalWidth\n    };\n  }, [columnWidths, defaultFormatter, defaultResizable, defaultSortable, minColumnWidth, rawColumns, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleStartIdx];\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleEndIdx];\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < colOverscanStartIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop\n}: ViewportRowsArgs<R>) {\n  const [rowsCount] = useMemo(() => {\n    return [rawRows.length];\n  }, [rawRows]);\n\n  const [rows] = useMemo(() => {\n    return [rawRows];\n  }, [rawRows]);\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import React from 'react';\nimport type { HeaderCellProps } from '../HeaderCell';\nimport type { SortDirection } from '../enums';\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  let sortText = '';\n  if (sortDirection === 'ASC') {\n    sortText = '\\u25B2';\n  } else if (sortDirection === 'DESC') {\n    sortText = '\\u25BC';\n  }\n\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className=\"rdg-header-sort-cell\" onClick={onClick}>\n      <span className=\"rdg-header-sort-name\">{children}</span>\n      <span>{sortText}</span>\n    </span>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport type { SortDirection } from './enums';\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  gridWidth: number;\n  scrollLeft: number;\n  scrolledToEnd: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  gridWidth,\n  scrollLeft,\n  onSort,\n  scrolledToEnd\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp();\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp() {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          column={column}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = clsx('rdg-cell', column.headerCellClass, {\n    'rdg-cell-resizable': column.resizable,\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn && scrollLeft > 0,\n    'rdg-cell-frozen-align-right': column.frozenAlignment === 'right',\n    'rdg-cell-frozen-align-right-no-shadow': scrolledToEnd && column.frozenAlignment === 'right',\n    'rdg-cell-align-right': column.alignment === 'right'\n  });\n  const style: React.CSSProperties = column.frozenAlignment === 'right' ? { width: column.width, left: gridWidth - column.width } : {\n    width: column.width,\n    left: column.left\n  };\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={sortColumn === column.key ? getAriaSort(sortDirection) : undefined}\n      className={className}\n      style={style}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n        <div className={clsx('rdg-cell-fake-background')} />\n      {getCell()}\n    </div>\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport function getColumnScrollPosition<R, SR>(columns: readonly CalculatedColumn<R, SR>[], idx: number, currentScrollLeft: number, currentClientWidth: number): number {\n  let left = 0;\n  let frozen = 0;\n\n  for (let i = 0; i < idx; i++) {\n    const column = columns[i];\n    if (column) {\n      if (column.width) {\n        left += column.width;\n      }\n      if (column.frozen) {\n        frozen += column.width;\n      }\n    }\n  }\n\n  const selectedColumn = columns[idx];\n  if (selectedColumn) {\n    const scrollLeft = left - frozen - currentScrollLeft;\n    const scrollRight = left + selectedColumn.width - currentScrollLeft;\n\n    if (scrollLeft < 0) {\n      return scrollLeft;\n    }\n    if (scrollRight > currentClientWidth) {\n      return scrollRight - currentClientWidth;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n  return false;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n","import type { CellNavigationMode } from '../enums';\nimport type { CalculatedColumn, Position, CellType } from '../types';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R)[];\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return column.editor != null\n    && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n  row: R\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition, row }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  const { idx, rowIdx } = nextPosition;\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n  const col = columns[idx];\n  const nextCell = row[col.key as keyof R] as unknown as CellType;\n\n  if (nextCell?.span === 0) {\n    const newRow = Object.entries(row).find(r => r[1]?.span > 1);\n    const newColIdx = columns.findIndex(c => newRow && c.key === newRow[0]);\n    return {\n      idx: newColIdx,\n      rowIdx\n    }\n  }\n  \n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n\nexport function checkIfCellDisabled(cell: undefined | string | CellType): boolean {\n  if (!cell) return false;\n\n  if (typeof cell === 'string' || !cell.disabled) {\n    return false;\n  }\n\n  return true;\n}\n","export * from './domUtils';\nexport * from './columnUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\nexport * from './inputUtils';\n\nexport function assertIsValidKeyGetter<R>(keyGetter: unknown): asserts keyGetter is (row: R) => React.Key {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n","import React, { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter } from './utils';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  gridWidth: number;\n  scrollLeft: number;\n  scrolledToEnd: boolean;\n  enableOptionsCol?: boolean;\n  optionsCol?: CalculatedColumn<R, SR>;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  gridWidth,\n  onSort,\n  scrollLeft,\n  scrolledToEnd,\n  enableOptionsCol,\n  optionsCol\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(rowKeyGetter(row));\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return column.key !== 'options' && (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n            gridWidth={gridWidth}\n            scrollLeft={scrollLeft}\n            scrolledToEnd={scrolledToEnd}\n          />\n        );\n      })}\n      {enableOptionsCol && optionsCol && (\n        <HeaderCell<R, SR>\n          key={optionsCol.key}\n          column={optionsCol}\n          onResize={onColumnResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={handleAllRowsSelectionChange}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          gridWidth={gridWidth}\n          scrollLeft={scrollLeft}\n          scrolledToEnd={scrolledToEnd}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n","import React, { forwardRef, memo, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { usePopper } from 'react-popper';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\nimport { wrapEvent, checkIfCellDisabled } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onDoubleClick,\n  onRowChange,\n  selectCell,\n  handleCellMouseDown,\n  selectedPosition,\n  selectRow,\n  handleDragEnter,\n  draggedOverRowIdx,\n  draggedOverColumnIdx,\n  hasFirstCopiedCell,\n  hasLastCopiedCell,\n  isFilling,\n  bottomRowIdx,\n  selectedCellsInfo,\n  gridWidth,\n  scrolledToEnd,\n  cell,\n  scrollLeft,\n  expandRow\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n  const disabled = checkIfCellDisabled(cell);\n  const error = typeof cell === 'object' && cell.error;\n  const alert = typeof cell === 'object' && cell.alert;\n  const warning = typeof cell === 'object' && cell.warning;\n  const span = typeof cell === 'object' && typeof cell.span === 'number' ? cell.span : 1;\n  const { frozen } = column;\n  const frozenRightAlign = column.frozenAlignment && column.frozenAlignment === 'right';\n  const hasChildren = row.children && row.children.length > 0;\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-align-right': frozenRightAlign,\n      'rdg-cell-frozen-align-right-no-shadow': scrolledToEnd && frozenRightAlign,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn && scrollLeft > 0,\n      'rdg-cell-selected': isCellSelected,\n      'rdg-cell-copied': isCopied && !disabled,\n      'rdg-cell-dragged-over': !alert && checkIsDraggedOver(true),\n      'rdg-cell-align-right': column.alignment === 'right',\n      'rdg-cell-disabled': disabled,\n      'rdg-cell-error': error,\n      'rdg-cell-alert': alert,\n      'rdg-cell-warning': warning,\n      'rdg-cell-children': hasChildren,\n      'rdg-cell-span-none': !span\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [reference, setReference] = useState<HTMLDivElement | null>(null);\n  const [popper, setPopper] = useState<HTMLDivElement | null>(null);\n  const { styles } = usePopper(reference, popper, {\n    placement: 'top',\n    modifiers: [{ name: 'offset', options: { offset: [0, 8] } }]\n  });\n\n  function checkIsDraggedOver(shouldCareIfDisabled?: boolean) {\n    if (shouldCareIfDisabled && disabled) {\n      return false;\n    }\n\n    if (span > 1) {\n      return false;\n    }\n\n    if (frozen ?? !isDraggedOver) {\n      return false;\n    }\n\n    if (selectedCellsInfo === selectedPosition.rowIdx && isFilling) {\n      return false;\n    }\n\n    if (selectedCellsInfo !== selectedPosition.rowIdx && column.idx !== draggedOverColumnIdx?.[0] && isFilling) {\n      return false;\n    }\n\n    return isDraggedOver;\n  }\n\n  function selectCellWrapper(openEditor?: boolean) {\n    if (!dragHandleProps) {\n      selectCell({ idx: column.idx, rowIdx }, openEditor);\n    }\n\n    if (dragHandleProps && openEditor) {\n      selectCell({ idx: column.idx, rowIdx }, openEditor);\n    }\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    event.preventDefault();\n    if (event.buttons === 2) return;\n    if (disabled || frozenRightAlign) return;\n    selectCellWrapper(false);\n    handleCellMouseDown(event);\n  }\n\n  function handleMouseEnter(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons === 1) {\n      handleDragEnter(column.idx);\n    }\n\n    if (alert ?? warning) {\n      setShowTooltip(true);\n    }\n  }\n\n  function handleMouseLeave() {\n    if (alert ?? warning) {\n      setShowTooltip(false);\n    }\n  }\n\n  function handleDoubleClick() {\n    if (!disabled && !frozenRightAlign) {\n      selectCellWrapper(true);\n    }\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick });\n  }\n\n  function checkForTopActiveBorder(): boolean {\n    if (isFilling) {\n      if (selectedPosition.rowIdx === rowIdx && isDraggedOver && selectedPosition.rowIdx !== bottomRowIdx) {\n        return true;\n      }\n\n      if (selectedPosition.rowIdx === bottomRowIdx && isDraggedOver && draggedOverRowIdx === rowIdx && !checkIsDraggedOver()) {\n        return true;\n      }\n    }\n\n    if (isCopied && hasFirstCopiedCell) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function checkForBottomActiveBorder(): boolean {\n    if (isFilling && rowIdx === bottomRowIdx && !checkIsDraggedOver() && isDraggedOver) {\n      return true;\n    }\n\n    if (isCopied && hasLastCopiedCell) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function checkForRightActiveBorder(): boolean {\n    if (\n      isFilling\n          && draggedOverColumnIdx\n          && draggedOverColumnIdx[draggedOverColumnIdx.length - 1] === column.idx\n          && isDraggedOver\n          && !checkIsDraggedOver()\n    ) {\n      return true;\n    }\n\n    if (isCopied) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function checkForLeftActiveBorder(): boolean {\n    if (isFilling && draggedOverColumnIdx && draggedOverColumnIdx[0] === column.idx && isDraggedOver && !checkIsDraggedOver()) {\n      return true;\n    }\n\n    if (isCopied) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleClickToExpand() {\n    if (column.key !== 'name') return;\n    if (!expandRow) return;\n    if (!hasChildren) return;\n\n    expandRow(row);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={span}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={column.frozenAlignment === 'right' ? { width: column.width, left: gridWidth - column.width } : {\n        width: column.width * span,\n        padding: span ? '0 18px' : 0,\n        left: column.left,\n        textAlign: span > 1 ? 'center' : 'right'\n      }}\n      onMouseDown={handleMouseDown}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onDoubleClick={wrapEvent(handleDoubleClick, onDoubleClick)}\n      onClick={handleClickToExpand}\n      data-test-id={`${column.name || column.key}-${rowIdx}`}\n    >\n        <>\n          <div\n            className={clsx(\n              'rdg-cell-fake-background',\n              {\n                'rdg-cell-fake-background-active-top': checkForTopActiveBorder(),\n                'rdg-cell-fake-background-active-bottom': checkForBottomActiveBorder(),\n                'rdg-cell-fake-background-active-right': checkForRightActiveBorder(),\n                'rdg-cell-fake-background-active-left': checkForLeftActiveBorder()\n              })}\n            ref={setReference}\n          />\n          <column.formatter\n            rowIdx={rowIdx}\n            cell={cell}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && !disabled && !frozenRightAlign && !frozen && span === 1 && (\n            <div className=\"rdg-cell-drag-handle\" {...dragHandleProps} />\n          )}\n        </>\n      {(alert || warning) && showTooltip && createPortal(\n        <div ref={setPopper} className={warning ? 'rdg-warning' : 'rdg-alert'} style={styles.popper}>{alert ?? warning}</div>,\n        document.body\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport type { EditorProps } from '../types';\nimport { useClickOutside } from '../hooks';\n\nexport default function EditorContainer<R, SR>({\n  row,\n  column,\n  onRowChange,\n  ...props\n}: EditorProps<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor === undefined) return null;\n\n  const editor = (\n    <div className=\"rdg-editor-container\" onClickCapture={onClickCapture}>\n      <column.editor\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, props.editorPortalTarget);\n  }\n\n  return editor;\n}\n","import React, { useState, useCallback } from 'react';\nimport clsx from 'clsx';\n\nimport EditorContainer from './editors/EditorContainer';\nimport type { CellRendererProps, SharedEditorProps, Omit, CellType } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n  | 'rowIdx'\n  | 'row'\n  | 'column'\n>;\n\ninterface EditCellProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorProps: SharedEditorProps<R>;\n  cell?: string | CellType\n}\n\nexport default function EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorProps,\n  cell,\n  ...props\n}: EditCellProps<R, SR>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n  const span = typeof cell === 'object' && typeof cell.span === 'number' ? cell.span : 1;\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    'rdg-cell-selected',\n    'rdg-cell-editing',\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    return (\n      <EditorContainer\n        {...editorProps}\n        rowIdx={rowIdx}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={cellRef}\n      className={className}\n      style={{\n        width: column.width * span,\n        left: column.left\n      }}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n","import React, { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport { checkIfCellDisabled } from './utils';\nimport type { RowRendererProps, SelectedCellProps, CellType } from './types';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  id,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  getDraggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  selectedPosition,\n  isFilling,\n  isMultipleRows,\n  onRowClick,\n  rowClass,\n  selectedCellsInfo,\n  setDraggedOverRowIdx,\n  setDraggedOverColumnIdx,\n  hasFirstCopiedCell,\n  hasLastCopiedCell,\n  top,\n  onRowChange,\n  selectCell,\n  selectRow,\n  handleCellMouseDown,\n  bottomRowIdx,\n  dragHandleProps,\n  draggedOverRowIdx,\n  draggedOverColumnIdx,\n  gridWidth,\n  scrollLeft,\n  scrolledToEnd,\n  expandRow,\n  enableOptionsCol,\n  optionsCol,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter(colIdx: number) {\n    if (isFilling && typeof selectedCellsInfo === 'number') {\n      if (selectedCellsInfo === selectedPosition.rowIdx) {\n        if (colIdx === selectedPosition.idx) {\n          setDraggedOverRowIdx?.(rowIdx);\n        } else {\n          setDraggedOverRowIdx?.(selectedCellsInfo);\n        }\n      } else {\n        setDraggedOverRowIdx?.(selectedCellsInfo);\n      }\n    } else {\n      setDraggedOverRowIdx?.(rowIdx);\n    }\n    if (isFilling) {\n      setDraggedOverColumnIdx?.(colIdx);\n    } else {\n      setDraggedOverColumnIdx?.(selectedPosition.idx);\n    }\n  }\n\n  function hasJustFilled() {\n    if (draggedOverColumnIdx && draggedOverColumnIdx.length > 1 && !isFilling) {\n      return true;\n    }\n\n    return false;\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        const isBottomCell = rowIdx === bottomRowIdx && column.idx === selectedPosition.idx;\n        const cell = row[column.key as keyof R] as unknown as CellType;\n        const cellCanBeEdited = !checkIfCellDisabled(cell);\n\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected && cellCanBeEdited) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              cell={cell}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorProps={selectedCellProps.editorProps}\n            />\n          );\n        }\n\n        return column.key !== 'options' && (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            cell={cell}\n            isCopied={copiedCellIdx === column.idx}\n            hasFirstCopiedCell={hasFirstCopiedCell}\n            hasLastCopiedCell={hasLastCopiedCell}\n            isDraggedOver={getDraggedOverCellIdx(rowIdx, column.idx) === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            dragHandleProps={isBottomCell && !hasJustFilled() ? dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n            onRowChange={onRowChange}\n            selectCell={selectCell}\n            selectRow={selectRow}\n            handleCellMouseDown={handleCellMouseDown}\n            handleDragEnter={handleDragEnter}\n            selectedPosition={selectedPosition}\n            draggedOverRowIdx={draggedOverRowIdx}\n            draggedOverColumnIdx={draggedOverColumnIdx}\n            isFilling={isFilling}\n            bottomRowIdx={bottomRowIdx}\n            selectedCellsInfo={selectedCellsInfo}\n            gridWidth={gridWidth}\n            scrollLeft={scrollLeft}\n            scrolledToEnd={scrolledToEnd}\n            expandRow={expandRow}\n          />\n        );\n      })}\n      {enableOptionsCol && optionsCol && (\n        <CellRenderer\n          key={optionsCol.key}\n          rowIdx={rowIdx}\n          column={optionsCol}\n          row={row}\n          isCopied={false}\n          isDraggedOver={false}\n          isCellSelected={false}\n          cell={row[optionsCol.key as keyof R] as unknown as CellType}\n          hasFirstCopiedCell={hasFirstCopiedCell}\n          hasLastCopiedCell={hasLastCopiedCell}\n          isRowSelected={isRowSelected}\n          dragHandleProps={undefined}\n          onFocus={undefined}\n          onKeyDown={undefined}\n          onRowClick={onRowClick}\n          onRowChange={onRowChange}\n          selectCell={selectCell}\n          selectRow={selectRow}\n          handleCellMouseDown={handleCellMouseDown}\n          handleDragEnter={handleDragEnter}\n          selectedPosition={selectedPosition}\n          draggedOverRowIdx={draggedOverRowIdx}\n          draggedOverColumnIdx={draggedOverColumnIdx}\n          isFilling={isFilling}\n          bottomRowIdx={bottomRowIdx}\n          selectedCellsInfo={selectedCellsInfo}\n          gridWidth={gridWidth}\n          scrollLeft={scrollLeft}\n          scrolledToEnd={scrolledToEnd}\n          expandRow={expandRow}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import React, {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback\n} from 'react';\nimport clsx from 'clsx';\nimport isEqual from 'lodash/isEqual';\n\nimport { useGridDimensions, useViewportColumns, useViewportRows, useLatestFunc } from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport {\n  assertIsValidKeyGetter,\n  getColumnScrollPosition,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  checkIfCellDisabled\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent,\n  CellType\n} from './types';\nimport type { CellNavigationMode, SortDirection } from './enums';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\ninterface RowsChangeParams<R, SR> {\n  newRows: R[];\n  updatedTargetRows?: R[];\n  targetRows?: R[];\n  targetCols?: CalculatedColumn<R, SR>[];\n  key?: string | null;\n  position?: R;\n  type?: 'paste' | 'fill' | 'edit';\n}\n\nconst body = globalThis.document?.body;\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: (row: R) => React.Key;\n  onRowsChange?: (arg0: RowsChangeParams<R, SR>) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<React.Key>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<React.Key>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  onFill?: (event: FillEvent<R, SR>) => R[];\n  onPaste?: (event: PasteEvent<R>) => R[];\n  expandRow?: (row: R) => void;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilterRow?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n  enableOptionsCol?: boolean;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKeyGetter,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  expandRow,\n  defaultColumnOptions,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer: EmptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onFill,\n  onPaste,\n  // Toggles and modes\n  enableOptionsCol,\n  cellNavigationMode = 'NONE',\n  // Miscellaneous\n  editorPortalTarget = body,\n  className,\n  style,\n  rowClass,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy\n}: DataGridProps<R, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedCells, setCopiedCells] = useState<{ rows: R[]; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [isFilling, setFilling] = useState(false);\n  const [selectedCellsInfo, setSelectedCells] = useState<number | undefined>(undefined);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [draggedOverColumnIdx, setOverColIdx] = useState<number[] | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n  const firstSelectedColIdx = useRef(-1);\n  const latestDraggedOverColIdx = useRef(-1);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowWrapper = useLatestFunc(selectRow);\n  const selectCellWrapper = useLatestFunc(selectCell);\n  const handleFormatterRowChangeWrapper = useLatestFunc(handleFormatterRowChange);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight;\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * rowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount } = useViewportRows({\n    rawRows,\n    rowHeight,\n    clientHeight,\n    scrollTop\n  });\n\n  const minColIdx = 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = onFill !== undefined;\n\n  // /**\n  //  * effects\n  //  */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: rowIdx * rowHeight,\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n  * callbacks\n  */\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, width);\n  }, [columnWidths, onColumnResize]);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  const setDraggedOverColumnIdx = useCallback((colIdx?: number) => {\n    const selectedCellColIdx = firstSelectedColIdx.current;\n\n    if (draggedOverColumnIdx && !draggedOverColumnIdx.some(i => i === colIdx)) return;\n\n    if (!colIdx && selectedCellColIdx) {\n      setOverColIdx([selectedCellColIdx]);\n      latestDraggedOverColIdx.current = selectedCellColIdx;\n    }\n\n    if (colIdx) {\n      const colIdxArray = [];\n      for (let i = selectedCellColIdx; i <= colIdx; i++) {\n        colIdxArray.push(i);\n      }\n      latestDraggedOverColIdx.current = colIdx;\n      setOverColIdx(colIdxArray);\n    }\n}, []); // eslint-disable-line\n\n  /**\n  * event handlers\n  */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { keyCode } = event;\n\n    if (\n      onPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && selectedPosition.idx !== -1\n      && selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        navigator.clipboard.readText().then(clipText => {\n          handlePaste(clipText);\n        });\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCells(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return rowIdx;\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor === undefined\n      || selectedPosition.mode === 'SELECT'\n      || isEqual(selectedPosition.row, selectedPosition.originalRow)) {\n      return;\n    }\n\n    const updatedRows = [...rawRows];\n    updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = selectedPosition.row;\n    onRowsChange?.({ newRows: updatedRows, position: selectedPosition.row, key: columns[selectedPosition.idx].key });\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    if (idx === -1) return;\n    const selectedCell = rawRows[rowIdx][columns[idx].key as keyof R] as unknown as CellType;\n    if (typeof selectedCell === 'string' || !selectedCell.disabled) {\n      const overRowIdx = latestDraggedOverRowIdx.current ?? rowIdx;\n      const startRowIndex = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n      const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx + 1;\n      const targetRows = overRowIdx ? rawRows.slice(startRowIndex, endRowIndex) : rawRows.slice(rowIdx, rowIdx + 1);\n      setCopiedCells({ rows: targetRows, columnKey: columns[idx].key });\n\n      if (navigator.clipboard) {\n        const copiedValues: string[] = [];\n        targetRows.forEach(r => {\n          const cell = r[columns[idx].key as keyof R] as unknown as CellType;\n          if (!cell.disabled) {\n            copiedValues.push(cell.value);\n          }\n        });\n        navigator.clipboard.writeText(copiedValues.join('\\n'));\n      }\n    }\n  }\n\n  function handlePaste(text: string) {\n    const { idx, rowIdx } = selectedPosition;\n    if (idx === -1) return;\n    const selectedCell = rawRows[rowIdx][columns[idx].key as keyof R] as unknown as CellType;\n    const cellCanBePasted = !checkIfCellDisabled(selectedCell);\n    if (\n      !onPaste\n      || !onRowsChange\n      || text === ''\n      || !isCellEditable(selectedPosition)\n      || !cellCanBePasted\n    ) {\n      return;\n    }\n\n    const copiedItems = text.split(/\\n/).map(i => i.split(/[\\t]/));\n    const updatedTargetRows = [];\n    const newRows = [...rawRows];\n    const startRowIndex = rowIdx;\n    const startColIndex = idx;\n    const endColIndex = idx + copiedItems[0].length - 1;\n    const endRowIndex = rowIdx + copiedItems.length - 1;\n\n    for (let i = 0; i < copiedItems.length; i++) {\n      for (let ix = 0; ix < copiedItems[i].length; ix++) {\n        const row = newRows[startRowIndex + i];\n        const colIdx = startColIndex + ix;\n        if (\n          row\n                && columns[colIdx]\n                && !checkIfCellDisabled(row[columns[colIdx].key as keyof R] as unknown as CellType)\n                && newRows[startRowIndex + i]\n        ) {\n          const formatFunction = columns[colIdx].formatValue;\n          newRows[startRowIndex + i] = {\n            ...row,\n            [columns[colIdx].key]: {\n              ...row[columns[colIdx].key as keyof R],\n              value: formatFunction ? formatFunction({ value: copiedItems[i][ix] }) : copiedItems[i][ix]\n            }\n          };\n        }\n      }\n      updatedTargetRows.push(newRows[startRowIndex + i]);\n    }\n\n    const targetCols = columns.slice(startColIndex, endColIndex + 1);\n\n    onRowsChange({ newRows, updatedTargetRows, targetCols, key: columns[idx].key, type: 'paste' });\n    setDraggedOverRowIdx(endRowIndex);\n    setDraggedOverColumnIdx(endColIndex);\n    setCopiedCells(null);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row: { ...row, [column.key]: { ...row[column.key as keyof R], value: '' } },\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    const overColIdx = latestDraggedOverColIdx.current;\n    const firstColIdx = firstSelectedColIdx.current;\n    if (overRowIdx === undefined || overColIdx < 0 || !onFill || !onRowsChange) return;\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    if (overColIdx !== firstColIdx) {\n      const startRowIndex = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n      const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx + 1;\n      const targetRows = rawRows.slice(startRowIndex, startRowIndex === endRowIndex ? endRowIndex + 1 : endRowIndex);\n      const targetCols = columns.filter((column, i: number) => i > firstColIdx && i <= overColIdx);\n      const updatedTargetRows = onFill({ columnKey: columns[idx].key, targetCols, sourceRow, targetRows, across: true });\n      const updatedRows = [...rawRows];\n      for (let i = startRowIndex; i < endRowIndex; i++) {\n        updatedRows[i] = updatedTargetRows[i - startRowIndex];\n      }\n      onRowsChange({ newRows: updatedRows, updatedTargetRows, targetCols, targetRows, type: 'fill' });\n    } else {\n      const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n      const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n      const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n\n      const updatedTargetRows = onFill({ columnKey: columns[idx].key, sourceRow, targetRows, across: false });\n      const updatedRows = [...rawRows];\n      for (let i = startRowIndex; i < endRowIndex; i++) {\n        updatedRows[i] = updatedTargetRows[i - startRowIndex];\n      }\n      onRowsChange({ newRows: updatedRows, updatedTargetRows, targetRows, key: columns[idx].key, type: 'fill' });\n    }\n    setCopiedCells(null);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    setFilling(true);\n    setSelectedCells(draggedOverRowIdx ?? selectedPosition.rowIdx);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      setFilling(false);\n      setSelectedCells(undefined);\n      handleDragEnd();\n    }\n  }\n\n  function handleCellMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    event.stopPropagation();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      event.stopPropagation();\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n\n    const updatedTargetRows = onFill({ columnKey: columns[idx].key, sourceRow, targetRows, across: false });\n    const updatedRows = [...rawRows];\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      updatedRows[i] = updatedTargetRows[i - rowIdx - 1];\n    }\n    onRowsChange({ newRows: updatedRows });\n  }\n\n  function handleFormatterRowChange(rowIdx: number, row: Readonly<R>) {\n    const newRows = [...rawRows];\n    newRows[rowIdx] = row;\n    onRowsChange?.({ newRows });\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      const updatedRows = [...rawRows];\n      updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = row;\n      onRowsChange?.({ newRows: updatedRows });\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    setDraggedOverRowIdx(undefined);\n    setOverColIdx(undefined);\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n      firstSelectedColIdx.current = position.idx;\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary = left < scrollLeft + width + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    const prevCol = columns[idx - 1];\n    const nextCol = columns[idx + 1];\n    const nextCell = row[nextCol?.key as keyof R] as unknown as CellType;\n    const prevCell = row[prevCol?.key as keyof R] as unknown as CellType;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return prevCol?.editable && !prevCell?.disabled ? { idx: idx - 1, rowIdx } : { idx, rowIdx };\n      case 'ArrowRight':\n        return nextCol?.editable && !nextCell?.disabled ? { idx: idx + 1, rowIdx } : { idx, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation = columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    nextPosition = getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition,\n      row: rows[nextPosition?.rowIdx]\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number, colIdx: number): number | undefined {\n    const { rowIdx } = selectedPosition;\n    if (draggedOverRowIdx === undefined) return;\n    if (draggedOverColumnIdx === undefined) return;\n    if (!draggedOverColumnIdx.some(i => i === colIdx)) return;\n    if (rowIdx < draggedOverRowIdx && (currentRowIdx < rowIdx || currentRowIdx > draggedOverRowIdx)) return;\n    if (rowIdx > draggedOverRowIdx && (currentRowIdx > rowIdx || currentRowIdx < draggedOverRowIdx)) return;\n\n    let isDraggedOver = false;\n\n    if (rowIdx === draggedOverRowIdx && currentRowIdx === rowIdx) {\n      isDraggedOver = draggedOverColumnIdx.some(i => i === colIdx);\n    } else {\n      isDraggedOver = rowIdx <= draggedOverRowIdx\n        ? rowIdx <= currentRowIdx && currentRowIdx <= draggedOverRowIdx && draggedOverColumnIdx.some(i => i === colIdx)\n        : rowIdx >= currentRowIdx && currentRowIdx >= draggedOverRowIdx && draggedOverColumnIdx.some(i => i === colIdx);\n    }\n\n    return isDraggedOver ? colIdx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getCopiedCellIdx(row: R): number | undefined {\n    if (copiedCells === null) return undefined;\n\n    if (typeof rowKeyGetter !== 'function') return undefined;\n\n    const key = rowKeyGetter(row);\n\n    if (copiedCells.rows.some(r => rowKeyGetter(r) === key)) {\n      return columns.findIndex(c => c.key === copiedCells.columnKey);\n    }\n\n    return undefined;\n  }\n\n  function hasFirstCopiedCell(row: R): boolean {\n    if (copiedCells === null) return false;\n    if (typeof rowKeyGetter !== 'function') return false;\n    const key = rowKeyGetter(row);\n    return rowKeyGetter(copiedCells.rows[0]) === key;\n  }\n\n  function hasLastCopiedCell(row: R): boolean {\n    if (copiedCells === null) return false;\n    if (typeof rowKeyGetter !== 'function') return false;\n    const key = rowKeyGetter(row);\n    return rowKeyGetter(copiedCells.rows[copiedCells.rows.length - 1]) === key;\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      let key: React.Key = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + rowIdx + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          gridWidth={gridWidth}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedCells !== null ? getCopiedCellIdx(row) : undefined}\n          hasFirstCopiedCell={copiedCells !== null && hasFirstCopiedCell(row)}\n          hasLastCopiedCell={copiedCells !== null && hasLastCopiedCell(row)}\n          getDraggedOverCellIdx={getDraggedOverCellIdx}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          setDraggedOverColumnIdx={isDragging ? setDraggedOverColumnIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeWrapper}\n          selectCell={selectCellWrapper}\n          selectRow={selectRowWrapper}\n          handleCellMouseDown={handleCellMouseDown}\n          selectedPosition={selectedPosition}\n          bottomRowIdx={draggedOverRowIdx && draggedOverRowIdx > selectedPosition.rowIdx ? draggedOverRowIdx : selectedPosition.rowIdx}\n          dragHandleProps={{\n            onMouseDown: handleMouseDown,\n            onDoubleClick: handleDoubleClick\n          }}\n          isFilling={isFilling}\n          isMultipleRows={selectedPosition.rowIdx !== draggedOverRowIdx}\n          selectedCellsInfo={selectedCellsInfo}\n          draggedOverRowIdx={draggedOverRowIdx}\n          draggedOverColumnIdx={draggedOverColumnIdx}\n          scrollLeft={scrollLeft}\n          scrolledToEnd={gridRef.current ? gridRef.current.clientWidth + scrollLeft >= totalColumnWidth : false}\n          expandRow={expandRow}\n          enableOptionsCol={enableOptionsCol}\n          optionsCol={columns[columns.length - 1]}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  const scrolledToEnd = gridRef.current ? gridRef.current.clientWidth + scrollLeft >= totalColumnWidth : false;\n\n  return (\n    <div\n      role={'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx('rdg', { 'rdg-viewport-dragging': isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, SR>\n        rowKeyGetter={rowKeyGetter}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n        gridWidth={gridWidth}\n        scrollLeft={scrollLeft}\n        scrolledToEnd={scrolledToEnd}\n        enableOptionsCol={enableOptionsCol}\n        optionsCol={columns[columns.length - 1]}\n      />\n      {rows.length === 0 && EmptyRowsRenderer ? <EmptyRowsRenderer /> : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className=\"rdg-focus-sink\"\n            onKeyDown={handleKeyDown}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight), position: 'sticky', left: 0 }}>\n            {enableOptionsCol && (\n              <div\n                className=\"rdg-mock-options\"\n                style={{\n                  boxShadow: scrolledToEnd ? 'none' : '-1px 0px 6px 2px rgba(0, 0, 0, 0.12)',\n                  width: scrolledToEnd ? 55 : 54,\n                  borderLeft: scrolledToEnd ? '1px solid #edeef0' : 'none'\n                }}\n              />\n            )}\n          </div>\n          {getViewportRows()}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown>(props: DataGridProps<R, SR> & React.RefAttributes<DataGridHandle>) => JSX.Element;\n","import React from 'react';\nimport type { EditorProps, CellType } from '../types';\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n}\n\nexport default function TextEditor<TRow, TSummaryRow = unknown>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  const cell = row[column.key as keyof TRow] as unknown as CellType;\n  return typeof cell === 'string' ? (\n    <input\n      className={column.alignment === 'right' ? 'rdg-text-editor-right' : 'rdg-text-editor'}\n      ref={autoFocusAndSelect}\n      value={cell}\n      onChange={event => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  ) : (\n    <input\n      className={column.alignment === 'right' ? 'rdg-text-editor-right' : 'rdg-text-editor'}\n      ref={autoFocusAndSelect}\n      value={cell.value}\n      onChange={event => onRowChange({ ...row, [column.key]: { ...cell, value: event.target.value } })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["useCombinedRefs","refs","useCallback","handle","ref","current","useClickOutside","onClick","frameRequestRef","useRef","cancelAnimationFrameRequest","cancelAnimationFrame","undefined","onClickRef","Error","useEffect","onOutsideClick","onWindowCaptureClick","requestAnimationFrame","window","addEventListener","capture","removeEventListener","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","useLayoutEffect","ResizeObserver","resizeObserver","entries","width","height","contentRect","observe","disconnect","useFocusRef","isCellSelected","focus","preventScroll","SelectCellFormatter","value","tabIndex","disabled","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","ValueFormatter","props","cellValue","cell","valueComponent","useMemo","stopPropagation","event","wrapEvent","ourHandler","theirHandler","SELECT_COLUMN_KEY","SelectColumn","key","name","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","useViewportColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","columns","lastFrozenColumnIndex","totalColumnWidth","totalFrozenColumnWidth","left","totalWidth","allocatedWidths","unassignedColumnsCount","map","metricsColumn","getSpecifiedWidth","clampColumnWidth","column","frozenAlignment","sort","aKey","frozenA","bKey","frozenB","unallocatedWidth","unallocatedColumnWidth","Math","max","floor","calculatedColumns","idx","newColumn","lastFrozenColumn","isLastFrozenColumn","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","length","firstUnfrozenColumnIdx","min","colVisibleStartIdx","colVisibleEndIdx","viewportColumns","colIdx","push","has","get","test","parseInt","RENDER_BACTCH_SIZE","useViewportRows","rawRows","rowHeight","clientHeight","scrollTop","rowsCount","rows","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","rowOverscanStartIdx","rowOverscanEndIdx","ceil","useLatestFunc","fn","args","SortableHeaderCell","onSort","sortColumn","sortDirection","children","sortText","sortDescendingFirst","direction","getAriaSort","HeaderCell","onResize","scrolledToEnd","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","offset","clientX","onPointerMove","onPointerUp","preventDefault","getCell","className","clsx","headerCellClass","alignment","style","getColumnScrollPosition","currentScrollLeft","currentClientWidth","i","selectedColumn","scrollRight","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","isSelectedCellEditable","selectedPosition","row","rowIdx","editor","editable","getNextSelectedCellPosition","cellNavigationMode","nextPosition","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","col","nextCell","span","newRow","Object","find","r","newColIdx","findIndex","c","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","checkIfCellDisabled","assertIsValidKeyGetter","keyGetter","HeaderRow","rowKeyGetter","onSelectedRowsChange","onColumnResize","enableOptionsCol","optionsCol","handleAllRowsSelectionChange","newSelectedRows","add","memo","Cell","isCopied","isDraggedOver","dragHandleProps","onDoubleClick","onRowChange","selectCell","handleCellMouseDown","selectRow","handleDragEnter","draggedOverRowIdx","draggedOverColumnIdx","hasFirstCopiedCell","hasLastCopiedCell","isFilling","bottomRowIdx","selectedCellsInfo","expandRow","cellRef","error","alert","warning","frozenRightAlign","hasChildren","cellClass","checkIsDraggedOver","showTooltip","setShowTooltip","reference","setReference","popper","setPopper","styles","usePopper","placement","modifiers","options","shouldCareIfDisabled","selectCellWrapper","openEditor","handleMouseDown","handleMouseEnter","handleMouseLeave","handleDoubleClick","handleRowChange","isShiftClick","checkForTopActiveBorder","checkForBottomActiveBorder","checkForRightActiveBorder","checkForLeftActiveBorder","handleClickToExpand","padding","textAlign","createPortal","document","body","forwardRef","EditorContainer","onClickCapture","editorOptions","editorPortalTarget","EditCell","editorProps","dimensions","setDimensions","node","top","getCellContent","docTop","docLeft","scrollingElement","documentElement","gridLeft","gridTop","Row","cellRenderer","CellRenderer","id","copiedCellIdx","getDraggedOverCellIdx","selectedCellProps","isMultipleRows","onRowClick","rowClass","setDraggedOverRowIdx","setDraggedOverColumnIdx","ariaRowIndex","ariaSelected","hasJustFilled","isBottomCell","cellCanBeEdited","mode","onKeyDown","onFocus","globalThis","DataGrid","summaryRows","onRowsChange","headerRowHeight","selectedRows","rowRenderer","RowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","ariaDescribedBy","setScrollTop","setScrollLeft","setColumnWidths","Map","setSelectedPosition","copiedCells","setCopiedCells","isDragging","setDragging","setFilling","setSelectedCells","setOverRowIdx","setOverColIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","firstSelectedColIdx","latestDraggedOverColIdx","selectRowWrapper","handleFormatterRowChangeWrapper","handleFormatterRowChange","headerRowsCount","summaryRowsCount","totalHeaderHeight","isSelectable","minColIdx","enableCellDragAndDrop","isCellWithinBounds","scrollToCell","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","set","selectedCellColIdx","some","colIdxArray","rowKey","previousRowIdx","step","sign","delete","handleKeyDown","keyCode","cKey","vKey","handleCopy","navigator","clipboard","readText","then","clipText","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","commitEditorChanges","isEqual","originalRow","updatedRows","newRows","position","selectedCell","overRowIdx","startRowIndex","endRowIndex","targetRows","slice","columnKey","copiedValues","forEach","writeText","join","text","cellCanBePasted","isCellEditable","copiedItems","split","updatedTargetRows","startColIndex","endColIndex","ix","formatFunction","formatValue","targetCols","type","onCellKeyDown","isDefaultPrevented","handleDragEnd","overColIdx","firstColIdx","sourceRow","filter","across","onMouseOver","onMouseUp","handleEditorRowChange","commitChanges","handleOnClose","enableEditor","clientWidth","isCellAtLeftBoundary","isCellAtRightBoundary","newScrollLeft","getNextPosition","prevCol","nextCol","prevCell","onNavigation","currentRowIdx","getSelectedCellProps","onClose","onMouseDown","getCopiedCellIdx","getViewportRows","rowElements","size","boxShadow","borderLeft","autoFocusAndSelect","input","TextEditor"],"mappings":"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"}